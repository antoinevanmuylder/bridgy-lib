{-# OPTIONS --cubical --guarded --bridges --no-fast-reduce  #-}

module Bridgy.Examples.Magma where

open import Bridgy.Core.BDisc

open import Bridgy.ROTT.Judgments
open import Bridgy.ROTT.Rules
open import Bridgy.ROTT.Param

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism

open import Cubical.Data.Sigma

postulate
  l : Level
  A : Type l
  hasbA : isBDisc A

-- In this file : Church encoding of the free magma generated by a bridge discrete type A

------------------------------------------------------------------------
-- Preliminaries 

-- Type of magmas

Magma : Type (ℓ-suc l)
Magma = Σ (Type l) λ X → (X → X → X)

-- Free magma generated by A as an inductive data type

data FMag : Type l where
  gen : A → FMag
  op : FMag → FMag → FMag

-- We can turn FMag into a magma as follows

FMagAsMagma : Magma
FMagAsMagma = FMag , op

-- Church encoding of the free magma generared by A

FMagChurch : Type (ℓ-suc l)
FMagChurch = ∀ (M : Magma) → ((A → M .fst) → M .fst)

-- We will prove that FMag ≃ FMagChurch by constructing an isomorphism

------------------------------------------------------------------------
-- Left and right maps + proof of retract

dataToChurch : FMag → FMagChurch
dataToChurch (gen a) (Mcr , Mop) Mgen = Mgen a
dataToChurch (op e1 e2) (Mcr , Mop) Mgen = Mop (dataToChurch e1 (Mcr , Mop) Mgen)
  (dataToChurch e2 (Mcr , Mop) Mgen)

churchToData : FMagChurch → FMag
churchToData k = k (FMag , op) gen
  
Retract : ∀ (fmag : FMag) → churchToData (dataToChurch fmag) ≡ fmag
Retract (gen a) = refl
Retract (op e1 e2) = cong₂ op (Retract e1) (Retract e2)

------------------------------------------------------------------------
-- Proof of section

-- The non-trivial part of this proof will be to prove that:
-- ∀ (k : FMagChurch) → dataToChurch (churchToData k) ≡ k
-- This will require the use of the param theorem

-- Magma NRG

MagmaNRG : NRGraph (ℓ-suc l)
MagmaNRG = TypeNRG l # (→Form _ _ (X⊨ElX) (→Form l l X⊨ElX X⊨ElX))

-- FMagChurch DNRG

FMagChurchAsDNRG : DispNRG l (MagmaNRG)
FMagChurchAsDNRG = wkn (→Form _ _
  (→Form _ _
    (bDisc-asDNRG A hasbA) --A
    X⊨ElX) --X
  X⊨ElX) --X

-- We now construct a logical relation of magmas between FMagAsMagma and a general magma M
-- using the graph of dataToChurch
  
edge-FMagAsMagma-M : (M : Magma) (f : A → M .fst) → MagmaNRG .nedge FMagAsMagma M
edge-FMagAsMagma-M M f = (λ fmag m → (dataToChurch fmag M f) ≡ m) ,
  λ fmag0 m0 hyp0 fmag1 m1 hyp1 → cong₂ (M .snd) hyp0 hyp1

-- A call to the param theorem using the relation above now grants us the desired equality

Section : ∀ (k : FMagChurch) → dataToChurch (churchToData k) ≡ k
Section = λ k → funExt λ (M : Magma) → funExt λ (f : A → M .fst) →
    param MagmaNRG FMagChurchAsDNRG k FMagAsMagma M (edge-FMagAsMagma-M M f)
    gen f (λ a0 a1 eq → cong f eq)
      
equivMagmaChurch : FMag ≃ FMagChurch
equivMagmaChurch = isoToEquiv (iso dataToChurch churchToData Section Retract)

  

