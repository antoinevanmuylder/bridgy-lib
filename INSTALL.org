In order to typecheck files of this library...
*** Install ~agda --bridges~
~agda --bridges~ is an extension of cubical agda which add parametricity primitives to cubical type theory, as discussed in Cavallo-Harper (CH): https://arxiv.org/pdf/2005.11290.pdf. The implementation can be found here (bridges branch): https://github.com/antoinevanmuylder/agda/tree/bridges.
To install with stack:
#+begin_src shell
git clone https://github.com/antoinevanmuylder/agda/
cd agda/
git checkout bridges
sudo curl -sSL https://get.haskellstack.org/ | sh #if you don't have stack
stack update
cp stack-<version>.yaml stack.yaml # choose version of haskell compiler
stack install # builds and copies agda binary to ~/.local/bin/
              # alternatively: `stack install --fast`     (slower agda binary though)
              # `stack install` may take a while to get started
agda-mode compile && agda-mode setup #add hook to emacs init file
#+end_src
*** Download the cubical library and register it in =~/.agda/libraries=
Clone the appropriate repo: https://github.com/agda/cubical.
Once this is done, add the following line to your =~/.agda/libraries= config file:
#+begin_src shell
<...>/cubical/cubical.agda-lib # where cubical/ is stored in <...>
#+end_src
If you don't have a ~libraries~ file yet, create one. You might have to add ~cubical~ to your defaults.
see [[https://agda.readthedocs.io/en/v2.6.2.1/tools/package-system.html][agda lib management]].
*** /!\ Revert cubical
The cubical library is normally compatible with the latest release of agda. On the other hand, ~agda --bridges~ is developped on top of agda/master. We explain how to modify cubical to make it compatible with master.
Note: in the future, ~agda --bridges~ will be developped on top of the latest agda release as well. We will have the following chain of dependencies:
~bridgy lib < cubical lib < agda --bridges (extends latest agda release)~.
For now we stick to the hack explained here.

Go to the root of the cubical library.
#+begin_src shell
git checkout d29db7f5e6cfe5d # while in cubical/
cd Cubical/
# replace old flag by new flag
find . -iname '*.agda*' -exec sed -i 's/--experimental-lossy-unification/--lossy-unification/g' {} \;
# replace old primitive names by appropriate names
sed -i 's/hiding ( primIdJ )/-- hiding ( primIdJ )/g' Cubical/Core/Id.agda
sed -i 's/inc to inS/inS to inS/g' Cubical/Core/Primitives.agda
#+end_src
*** Enjoy
Try opening ~Bridgy/BridgePrims.agda~ with emacs, and load with ~C-c C-l~.
other emacs commands:
  https://agda.readthedocs.io/en/v2.6.2.1/tools/emacs-mode.html
*** Get rid of warnings in emacs
To get rid of warnings generated by some files of the cubical library:
#+begin_src bash
M-x load-library RET agda2-mode RET
M-x customize-group RET agda2 RET
#+end_src
Then insert the following line in the ~Agda2 Program Args~ list:
#+begin_src bash
--warning=noNoEquivWhenSplitting #may not exist in future version
#+end_src
*** Mixed Kan operations
- The ~bridges~ branch of the mentioned [[https://github.com/antoinevanmuylder/agda/][fork]] does not implement mixed Kan operations.
- The ~bridges-mcstr-nomrg~ branch implements Kan operations and has to use a reverted cubical library.
- The ~bridges-mixed-constraints~ branch implements Kan operations, and extends agda 2.6.3.
  It is currently broken as some changes introduced by 2.6.3 remain to be correctly integrated.
